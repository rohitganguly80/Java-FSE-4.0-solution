What is Recursion?
Recursion is when a function calls itself to solve smaller instances of the same problem.

It’s useful when a problem can be broken into similar subproblems.

Why use Recursion?
It simplifies code, especially in problems involving:

Tree traversal

Divide & conquer (e.g., Merge Sort)

Repetitive mathematical patterns like Fibonacci, factorial, etc.

Time Complexity:
Each recursive call reduces n by 1 → O(n) time and space.

For n years, we perform n recursive multiplications.

❗ Drawbacks:
Stack Overflow Risk: Deep recursion (e.g., large n like 10,000) can overflow the stack.

Redundant Work: For recursive calls like f(n-1) → f(n-2) → f(n-3)... though not an issue here (no overlapping subproblems like Fibonacci).
Conclusion
Recursive solution shows how cleanly recursive thinking can model financial compounding.

However, iteration is preferred in production for better performance and avoiding stack overflow.

For very large data sets or time periods, memoization or dynamic programming can be considered (if overlapping subproblems arise).